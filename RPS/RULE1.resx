<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAA//Z
</value>
  </data>
</root>